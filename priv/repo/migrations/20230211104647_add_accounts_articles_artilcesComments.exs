defmodule Readme.Repo.Migrations.AddAccountsArticlesArtilcesComments do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :bio, :text
      add :first_name, :text
      add :last_name, :text
      add :display_picture, :text
      add :account_id, :bigint, null: false
    end

    create table(:tokens, primary_key: false) do
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :extra_data, :map
      add :purpose, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :subject, :text, null: false
      add :jti, :text, null: false, primary_key: true
    end

    create table(:articles_likes, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :articles_id, :bigint, null: false
      add :accounts_id, :bigint, null: false
    end

    create table(:articles_comments_likes, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :articles_comments_id, :bigint, null: false
      add :accounts_id, :bigint, null: false
    end

    create table(:articles_comments, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
    end

    alter table(:articles_comments_likes) do
      modify :articles_comments_id,
             references(:articles_comments,
               column: :id,
               prefix: "public",
               name: "articles_comments_likes_articles_comments_id_fkey",
               type: :bigint
             )
    end

    alter table(:articles_comments) do
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :content, :text, null: false
      add :accounts_id, :bigint
    end

    create table(:articles, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
    end

    alter table(:articles_likes) do
      modify :articles_id,
             references(:articles,
               column: :id,
               prefix: "public",
               name: "articles_likes_articles_id_fkey",
               type: :bigint
             )
    end

    alter table(:articles) do
      add :created_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :title, :text, null: false
      add :sub_title, :text, null: false
      add :story, :text, null: false
      add :accounts_id, :bigint, null: false
    end

    create table(:accounts, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
    end

    alter table(:users) do
      modify :account_id,
             references(:accounts,
               column: :id,
               prefix: "public",
               name: "users_account_id_fkey",
               type: :bigint
             )
    end

    alter table(:articles_likes) do
      modify :accounts_id,
             references(:accounts,
               column: :id,
               prefix: "public",
               name: "articles_likes_accounts_id_fkey",
               type: :bigint
             )
    end

    alter table(:articles_comments_likes) do
      modify :accounts_id,
             references(:accounts,
               column: :id,
               prefix: "public",
               name: "articles_comments_likes_accounts_id_fkey",
               type: :bigint
             )
    end

    alter table(:articles_comments) do
      modify :accounts_id,
             references(:accounts,
               column: :id,
               prefix: "public",
               name: "articles_comments_accounts_id_fkey",
               type: :bigint
             )
    end

    alter table(:articles) do
      modify :accounts_id,
             references(:accounts,
               column: :id,
               prefix: "public",
               name: "articles_accounts_id_fkey",
               type: :bigint
             )
    end

    alter table(:accounts) do
      add :email, :citext, null: false
      add :hashed_password, :text, null: false
    end

    create unique_index(:accounts, [:email], name: "accounts_unique_email_index")

    execute("""
    alter table articles_comments
      add column parent_path ltree, 
      add column path ltree generated always as (coalesce(parent_path::text,'')::ltree || id::text::ltree) stored unique;
    """)

    execute("""
    alter table articles_comments
    add constraint fk_parent
    foreign key(parent_path)
    references articles_comments(path)
    on delete cascade
    on update cascade;
    """)

    execute("""
    create index articles_comments_account_id_idx on articles_comments(accounts_id);
    """)

    execute("""
    create index articles_comments_parent_path_idx on articles_comments(parent_path asc nulls first);
    """)

    execute("""
    create index articles_comments_path_idx on articles_comments using gist (path);;
    """)
  end

  def down do
    execute("""
    drop index articles_comments_path_idx;
    """)

    execute("""
    drop index articles_comments_parent_path_idx;
    """)

    execute("""
    drop index articles_comments_account_id_idx;
    """)

    execute("""
    alter table articles_comments
    drop constraint fk_parent;
    """)

    execute("""
    alter table articles_comments
      drop column path, 
      drop column parent_path;
    """)

    drop_if_exists unique_index(:accounts, [:email], name: "accounts_unique_email_index")

    alter table(:accounts) do
      remove :hashed_password
      remove :email
    end

    drop constraint(:articles, "articles_accounts_id_fkey")

    alter table(:articles) do
      modify :accounts_id, :bigint
    end

    drop constraint(:articles_comments, "articles_comments_accounts_id_fkey")

    alter table(:articles_comments) do
      modify :accounts_id, :bigint
    end

    drop constraint(:articles_comments_likes, "articles_comments_likes_accounts_id_fkey")

    alter table(:articles_comments_likes) do
      modify :accounts_id, :bigint
    end

    drop constraint(:articles_likes, "articles_likes_accounts_id_fkey")

    alter table(:articles_likes) do
      modify :accounts_id, :bigint
    end

    drop constraint(:users, "users_account_id_fkey")

    alter table(:users) do
      modify :account_id, :bigint
    end

    drop table(:accounts)

    alter table(:articles) do
      remove :accounts_id
      remove :story
      remove :sub_title
      remove :title
      remove :updated_at
      remove :created_at
    end

    drop constraint(:articles_likes, "articles_likes_articles_id_fkey")

    alter table(:articles_likes) do
      modify :articles_id, :bigint
    end

    drop table(:articles)

    alter table(:articles_comments) do
      remove :accounts_id
      remove :content
      remove :updated_at
      remove :created_at
    end

    drop constraint(:articles_comments_likes, "articles_comments_likes_articles_comments_id_fkey")

    alter table(:articles_comments_likes) do
      modify :articles_comments_id, :bigint
    end

    drop table(:articles_comments)

    drop table(:articles_comments_likes)

    drop table(:articles_likes)

    drop table(:tokens)

    drop table(:users)
  end
end